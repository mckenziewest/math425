## DBsubject(Abstract algebra)
## DBchapter(Groups)
## DBsection(Permutation groups)
## Institution(University of Wisconsin-Eau Claire)
## Author(Mckenzie West)
## KEYWORDS('quotient groups')

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "algebraMacros.pl",
  "PGcourse.pl",
  "PGML.pl",
  "niceTables.pl"
);

# Exercise 1
$m_1 = random(15,20,1);
$n_1 = 4*$m_1;

@sols_1 = (2,3,0,3,0,1,0,1,2);

# Exercise 2
@moduli_2 = (21, 26, 27, 28, 31, 35, 36, 37, 38, 39, 42, 43, 45, 49, 52, 54, 56, 57);
@order_2 = (12, 12, 18, 12, 30, 24, 12, 36, 18, 24, 12, 42, 24, 42, 24, 18, 24, 36);
@index_6_gens_2 = ([8], [25], [10], [15], [16], [22], [19], [27], [7], [14, 25], [29], [41], [26, 19], [43], [27, 25], [37], [15, 29], [11]);
@subgroup_list = ([1,8], [1, 25], [1, 10, 19], [1, 15], [1, 2, 4, 8, 16], [8, 1, 29, 22], [1, 19], [1, 36, 10, 11, 26, 27], [1, 11, 7], [38, 1, 14, 25], [1, 29], [1, 35, 4, 41, 11, 16, 21], [1, 26, 19, 44], [1, 36, 8, 43, 15, 22, 29], [1, 27, 25, 51], [1, 19, 37], [1, 43, 29, 15], [1, 7, 11, 49, 20, 26]);
@coset_reps_2 = ([1, 2, 4, 5, 10, 13], [1, 3, 5, 7, 9, 11], [1, 2, 4, 5, 7, 8], [1, 3, 5, 9, 11, 13], [1, 3, 5, 7, 11, 15], [1, 2, 3, 4, 6, 12], [1, 5, 7, 11, 13, 17], [1, 2, 3, 5, 6, 9], [1, 3, 5, 9, 13, 27], [1, 2, 4, 5, 7, 10], [1, 5, 11, 13, 17, 23], [1, 2, 3, 6, 7, 9], [1, 2, 4, 8, 11, 13], [1, 2, 3, 4, 5, 6], [1, 3, 5, 7, 9, 11], [1, 5, 7, 11, 13, 17], [1, 3, 5, 9, 11, 13], [1, 2, 4, 5, 8, 10]);
@inverses_2 = (20, 1, 2, 17, 16, 3, 5, 34, 1, 14, 1, 40, 43, 5, 27, 5, 17, 25);
@answer_list_2 = (
                    [4, 1, 10, 13, 5, 1, 2, 13, 5, 10, 10, 13, 4, 1, 2, 13, 5, 1, 2, 4, 5, 10, 2, 4, 1] ,
                    [9, 11, 5, 1, 7, 11, 1, 9, 7, 3, 5, 9, 3, 11, 1, 1, 7, 11, 3, 5, 7, 3, 1, 5, 9] ,
                    [4, 8, 1, 5, 7, 8, 7, 2, 1, 5, 1, 2, 7, 8, 4, 5, 1, 8, 4, 2, 7, 5, 4, 2, 1] ,
                    [9, 1, 13, 5, 11, 1, 11, 3, 13, 9, 13, 3, 11, 1, 5, 5, 13, 1, 9, 3, 11, 9, 5, 3, 1] ,
                    [5, 15, 11, 1, 7, 15, 7, 1, 3, 11, 11, 1, 5, 15, 3, 1, 3, 15, 7, 5, 7, 11, 3, 5, 1] ,
                    [4, 6, 1, 12, 3, 6, 2, 12, 4, 1, 1, 12, 2, 3, 6, 12, 4, 3, 1, 2, 3, 1, 6, 2, 4] ,
                    [7, 17, 1, 11, 13, 17, 13, 5, 1, 11, 1, 5, 13, 17, 7, 11, 1, 17, 7, 5, 13, 11, 7, 5, 1] ,
                    [3, 6, 1, 9, 5, 6, 9, 2, 5, 1, 1, 2, 9, 3, 6, 9, 5, 3, 1, 2, 5, 1, 6, 2, 3] ,
                    [9, 13, 27, 1, 5, 13, 9, 1, 27, 3, 27, 1, 5, 3, 13, 1, 27, 3, 5, 9, 5, 3, 13, 9, 1] ,
                    [4, 5, 10, 1, 7, 5, 10, 7, 2, 1, 10, 7, 1, 4, 2, 1, 2, 4, 10, 5, 7, 1, 2, 5, 4] ,
                    [11, 13, 23, 1, 17, 13, 23, 17, 5, 1, 23, 17, 1, 11, 5, 1, 5, 11, 23, 13, 17, 1, 5, 13, 11] ,
                    [1, 6, 3, 9, 7, 6, 9, 7, 1, 2, 3, 7, 9, 2, 1, 9, 1, 2, 6, 3, 7, 2, 1, 3, 6] ,
                    [4, 8, 11, 13, 1, 8, 11, 13, 1, 2, 11, 13, 1, 2, 4, 13, 1, 2, 4, 8, 1, 2, 4, 8, 11] ,
                    [4, 6, 1, 3, 5, 6, 2, 5, 1, 4, 1, 5, 2, 6, 3, 3, 1, 6, 4, 2, 5, 4, 3, 2, 1] ,
                    [9, 11, 5, 1, 7, 11, 1, 9, 7, 3, 5, 9, 3, 11, 1, 1, 7, 11, 3, 5, 7, 3, 1, 5, 9] ,
                    [7, 17, 1, 11, 13, 17, 13, 5, 1, 11, 1, 5, 13, 17, 7, 11, 1, 17, 7, 5, 13, 11, 7, 5, 1] ,
                    [9, 1, 13, 5, 11, 1, 11, 3, 13, 9, 13, 3, 11, 1, 5, 5, 13, 1, 9, 3, 11, 9, 5, 3, 1] ,
                    [4, 8, 10, 5, 1, 8, 5, 1, 10, 2, 10, 1, 4, 2, 8, 5, 10, 2, 1, 4, 1, 2, 8, 4, 5]
                    );
$choice_2 = random(0,18,1);
$n_2 = $moduli_2[$choice_2];
$G_order_2 = $order_2[$choice_2];
@H_gens_2 = @{$index_6_gens_2[$choice_2]};
$H_gen_str_2 = join(", ",@H_gens_2);
$H_gen_str_2 = Compute("$H_gen_str_2");
@H_2 = @{$subgroup_list[$choice_2]};
$H_str_2 = join(", ",@H_2);
$H_str_2 = Compute("$H_str_2");
@reps_2 = @{$coset_reps_2[$choice_2]};
$inv_2 = $inverses_2[$choice_2];
@sols_2 = @{$answer_list_2[$choice_2]};


# Exercise 3
# View values as disjoint cycles
@sigma_12 = (1,2);
$cycle_12 = disjointCycles( ~~@sigma_12 );
@sigma_13 = (1,3);
$cycle_13 = disjointCycles( ~~@sigma_13 );
@sigma_14 = (1,4);
$cycle_14 = disjointCycles( ~~@sigma_14 );
@sigma_123 = (1,2,3);
$cycle_123 = disjointCycles( ~~@sigma_123 );
@sigma_132 = (1,3,2);
$cycle_132 = disjointCycles( ~~@sigma_132 );

Context()->strings->add(e=>{});

BEGIN_PGML

*Group-12* Compute the Cayley table for a quotient group of a group.

Recall that to receive credit for an objective assigned via WeBWorK, you must earn full credit on the exercise, with a maximum of 5 attempts.
Additional attempts are available immediately.

--------

*Exercise 1* The Operation is ➕

Let [`G=\mathbb{Z}_{[$n_1]}`] and [`H=\langle 4 \rangle`]. We know [`|G/H|=|G|/|H|=4`]. Moreover, [`G/H=\{0+H,1+H,2+H,3+H\}`].

Complete the Cayley table for [`G/H`]. Note: each entry should be one of: [`0,1,2,3`].


END_PGML
BEGIN_TEXT
\{
DataTable(
  [
    [["\(+\)",headerrow => 1, midrule=>1], "\(0+H\)", "\(1+H\)", "\(2+H\)", "\(3+H\)"],
    ["\(0+H\)", "\(0+H\)", "\(1+H\)", "\(2+H\)", "\(3+H\)"],
    ["\(1+H\)", "\(1+H\)", ans_rule(15)."\(+H\)",  ans_rule(15)."\(+H\)",  ans_rule(15)."\(+H\)"],
    ["\(2+H\)", "\(2+H\)",  ans_rule(15)."\(+H\)",  ans_rule(15)."\(+H\)",  ans_rule(15)."\(+H\)"],
    ["\(3+H\)", "\(3+H\)",   ans_rule(15)."\(+H\)",  ans_rule(15)."\(+H\)",  ans_rule(15)."\(+H\)"],
  ],
  align => 'c|cccc',
  center => 0,
);
\}
END_TEXT
BEGIN_PGML

-----------

*Exercise 2* The Operation is ✖

Let [`G=\mathbb{Z}_{[$n_2]}^*`] and [`H=\langle [$H_gen_str_2]\rangle=\{[$H_str_2]\}`].
Then [`G/H = \{[$reps_2[0]]H,[$reps_2[1]]H,[$reps_2[2]]H,[$reps_2[3]]H,[$reps_2[4]]H,[$reps_2[5]]H\}`].

For this one, I'll give you some hints/examples for filling it in:
1. The group [`G`] is abelian, so [`G/H`] is also abelian. Thus the Cayley table is symmetric across the diagonal.
2. Recall the rule that no entry can repeat in a row or column of a Cayley table, so that should narrow down your options.
3. To give you an example of how I would find an entry, let's compute [`([$reps_2[1]]H)([$reps_2[4]]H)`]. By definition of the quotient group [`G/H`], we know that [`([$reps_2[1]]H)([$reps_2[4]]H)=([$reps_2[1]]\cdot[$reps_2[4]])H=[$reps_2[1]*$reps_2[4]]H`].  Now we ask, what of [`[$reps_2[0]]H,[$reps_2[1]]H,[$reps_2[2]]H,[$reps_2[3]]H,[$reps_2[4]]H,[$reps_2[5]]H`] this coset is equal to.  Due to the non-repeating in rows and columns, we know that [`[$reps_2[1]*$reps_2[4]]H`] cannot be either [`([$reps_2[1]]H)`] or [`([$reps_2[4]]H)`].  By Theorem 2.6.1, we know [`aH=bH`] if and only if [`a^{-1}b\in H`]. So I take [`a=[$reps_2[1]*$reps_2[4]]`] and for the remaining possible values of [`b`], I compute [`a^{-1}b`]:
    * [`[$reps_2[1]*$reps_2[4]]^{-1}\cdot[$reps_2[0]]=[$inv_2]\cdot[$reps_2[0]] = [$inv_2*$reps_2[0] % $n_2]`]
    * [`[$reps_2[1]*$reps_2[4]]^{-1}\cdot[$reps_2[2]]=[$inv_2]\cdot[$reps_2[2]] = [$inv_2*$reps_2[2] % $n_2]`]
    * [`[$reps_2[1]*$reps_2[4]]^{-1}\cdot[$reps_2[3]]=[$inv_2]\cdot[$reps_2[3]] = [$inv_2*$reps_2[3] % $n_2]`]
    * [`[$reps_2[1]*$reps_2[4]]^{-1}\cdot[$reps_2[5]]=[$inv_2]\cdot[$reps_2[5]] = [$inv_2*$reps_2[5] % $n_2]`]

    Now, [`[$inv_2*$sols_2[3] % $n_2]\in H`], so [`([$reps_2[1]]H)([$reps_2[4]]H)=[$sols_2[3]]H`].
4. You might be asking, how do we find [`a^{-1}`] easily?  My answer is that you can use Sage!  Go to the website [@ htmlLink( protect_underbar("https://sagecell.sagemath.org/"), protect_underbar("https://sagecell.sagemath.org/") ); @]*, and paste the lines:

    G = Integers([$n_2])
    print(G([$reps_2[1]*$reps_2[4]])^-1)

    The value that's printed is the value of [`[$reps_2[1]*$reps_2[4]]^{-1}`] in [`\mathbb{Z}_{[$n_2]}^*`].

Complete the Cayley table for [`G/H`]. Note: each entry should be one of: [`[$reps_2[0]],[$reps_2[1]],[$reps_2[2]],[$reps_2[3]],[$reps_2[4]],[$reps_2[5]]`].

END_PGML
BEGIN_TEXT
\{
DataTable(
  [
    [["\(\cdot\)",headerrow => 1, midrule=>1], "\(1H\)", "\($reps_2[1]H\)", "\($reps_2[2]H\)", "\($reps_2[3]H\)", "\($reps_2[4]H\)", "\($reps_2[5]H\)"],
    ["\(1H\)", "\(1H\)", "\($reps_2[1]H\)", "\($reps_2[2]H\)", "\($reps_2[3]H\)", "\($reps_2[4]H\)", "\($reps_2[5]H\)"],
    ["\($reps_2[1]H\)", "\($reps_2[1]H\)", ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)"],
    ["\($reps_2[2]H\)", "\($reps_2[2]H\)", ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)"],
    ["\($reps_2[3]H\)", "\($reps_2[3]H\)", ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)"],
    ["\($reps_2[4]H\)", "\($reps_2[4]H\)", ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)"],
    ["\($reps_2[5]H\)", "\($reps_2[5]H\)", ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)"],
  ],
  align => 'c|cccc',
  center => 0,
);
\}
END_TEXT

BEGIN_PGML

---------

*Exercise 3* The Operation is ⭕

Let [`G=S_4`] and [`H=\{e, (1\ 2)(3\ 4), (1\ 3)(2\ 4), (1\ 4)(2\ 3)\}`]. I claim that [`H\lhd G`] so [`G/H`] exists. We know [`|G/H|=|G|/|H|=6`]. Moreover, [`G/H=\{eH,(1\ 2)H,(1\ 3)H,(1\ 4)H,(1\ 2\ 3)H,(1\ 3\ 2)H\}`].

Complete the Cayley table for [`G/H`]. Note: each entry should be one of: [`e`],[`(1,2)`],[`(1,3)`],[`(1,4)`],[`(1,2,3)`], or [`(1,3,2)`].

⚠️: Uh oh, [`G`] is not abelian this time so we don't know that [`G/H`] is.  That is, don't assume the table is symmetric. However, it's still a Cayley table so entries cannot repeat across rows.

This time, I will share the full cosets with you.  Look here:
[@ htmlLink( protect_underbar("https://groupprops.subwiki.org/wiki/Normal_V4_in_S4#Cosets"), protect_underbar("https://groupprops.subwiki.org/wiki/Normal_V4_in_S4#Cosets") ); @]*.
How does this help? Well another part of Theorem 2.6.1 says that [`aH=bH`] if and only if [`a\in bH`].
Specifically, if we want to compute [`((1\ 4)H)((1\ 2\ 3)H)`], we compute [`(1\ 4)(1\ 2\ 3) = (1\ 2\ 3\ 4)`].
Now we go to the list of cosets in the website.  We see that [`(1\ 2\ 3\ 4)`] is in the same coset at [`(1\ 3)`].
In the entry of the table corresponding to [`((1, 4)H)((1, 2, 3)H)`], I will therefore enter [`(1,3)`].

END_PGML
BEGIN_TEXT
\{
DataTable(
  [
    [["\(\circ\)",headerrow => 1, midrule=>1], "\(eH\)", "\((1,2)H\)", "\((1,3)H\)", "\((1,4)H\)", "\((1,2,3)H\)", "\((1,3,2)H\)"],
    ["\(eH\)", "\(eH\)", "\((1,2)H\)", "\((1,3)H\)", "\((1,4)H\)", "\((1,2,3)H\)", "\((1,3,2)H\)"],
    ["\((1,2)H\)", "\((1,2)H\)", ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)"],
    ["\((1,3)H\)","\((1,3)H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)"],
    ["\((1,4)H\)","\((1,4)H\)",   ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)"],
    ["\((1,2,3)H\)", "\((1,2,3)H\)", ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)"],
    ["\((1,3,2)H\)", "\((1,3,2)H\)", ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)",  ans_rule(15)."\(H\)"],
  ],
  align => 'c|cccccc',
  center => 0,
);
\}
END_TEXT

    install_problem_grader(~~&std_problem_grader);
    $showPartialCorrectAnswers = 1;

foreach my $ans_1 ( @sols_1 ) {
    ANS( Compute($ans_1)->cmp() );
}
foreach my $ans_2 ( @sols_2 ) {
    ANS( Compute($ans_2)->cmp() );
}

## (12) Row

#(12)(12)H=H
ANS( Compute("e")->cmp() );
#(12)(13)H=(132)H
ANS( $cycle_132->cmp(checker => ~~&checkCycles) );
#(12)(14)H=(142)H=(123)H
ANS( $cycle_123->cmp(checker => ~~&checkCycles) );
#(12)(123)=(23)H=(14)H
ANS( $cycle_14->cmp(checker => ~~&checkCycles) );
#(12)(132)H=(13)H
ANS( $cycle_13->cmp(checker => ~~&checkCycles) );

## (13) Row

#(13)(12)H=(123)H
ANS( $cycle_123->cmp(checker => ~~&checkCycles) );
#(13)(13)H=H
ANS( Compute("e")->cmp() );
#(13)(14)H=(143)H=(132)H
ANS( $cycle_132->cmp(checker => ~~&checkCycles) );
#(13)(123)=(12)H
ANS( $cycle_12->cmp(checker => ~~&checkCycles) );
#(13)(132)H=(23)H=(14)H
ANS( $cycle_14->cmp(checker => ~~&checkCycles) );

## (14) Row
#(14)(12)H=(124)H=(132)H
ANS( $cycle_132->cmp(checker => ~~&checkCycles) );
#(14)(13)H=(134)H=(123)H
ANS( $cycle_123->cmp(checker => ~~&checkCycles) );
#(14)(14)H=H
ANS( Compute("e")->cmp() );
#(14)(123)H=(1234)H=(13)H
ANS( $cycle_13->cmp(checker => ~~&checkCycles) );
#(14)(132)H=(1324)H=(12)H
ANS( $cycle_12->cmp(checker => ~~&checkCycles) );

## (123) Row
#(123)(12)H=(13)H
ANS( $cycle_13->cmp(checker => ~~&checkCycles) );
#(123)(13)H=(23)H=(14)H
ANS( $cycle_14->cmp(checker => ~~&checkCycles) );
#(123)(14)H=(1423)H=(12)H
ANS( $cycle_12->cmp(checker => ~~&checkCycles) );
#(123)(123)H=(132)H
ANS( $cycle_132->cmp(checker => ~~&checkCycles) );
#(123)(132)H=H
ANS( Compute("e")->cmp() );

## (132) Row
#(132)(12)H=(23)H=(14)H
ANS( $cycle_14->cmp(checker => ~~&checkCycles) );
#(132)(13)H=(12)H
ANS( $cycle_12->cmp(checker => ~~&checkCycles) );
#(132)(14)H=(1432)H=(13)H
ANS( $cycle_13->cmp(checker => ~~&checkCycles) );
#(132)(123)H=H
ANS( Compute("e")->cmp() );
#(132)(132)H=(123)H
ANS( $cycle_123->cmp(checker => ~~&checkCycles) );



ENDDOCUMENT();
